(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{222:function(t,s,n){t.exports=n.p+"assets/img/string_img_01.5fe1aeb1.png"},246:function(t,s,n){"use strict";n.r(s);var a=n(17),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"反转字符串中的单词-iii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反转字符串中的单词-iii"}},[t._v("#")]),t._v(" 反转字符串中的单词 III")]),t._v(" "),a("p",[t._v("给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序 "),a("br"),t._v("\n注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格 "),a("br"),t._v("\n示例 1: "),a("br")]),t._v(" "),a("blockquote",[a("p",[t._v('输入: "Let\'s take LeetCode contest" '),a("br"),t._v('\n输出: "s\'teL ekat edoCteeL tsetnoc"')])]),t._v(" "),a("p",[t._v("思路：把字符串split('')转成数组，借助数组的reverse反转后，用join('')转回字符串")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const reverseWords=(arr)=>{\n    // 也可以用split(/\\s/g)  \\s表示空格     split做分割  match去哪些识别\n    // 或者match(/[\\w']+/g)  []可选项  \\W 字符 '为Let's的点\n    return arr.split(' ').map(item => { \n        return  item.split('').reverse().join('')\n    }).join(' ')\n    \n}\nconst arr = \"Let's take LeetCode contest\"\nconsole.log(reverseWords(arr)) \n")])])]),a("p",[t._v("match() 用于字符串， exec() 用于对象")]),t._v(" "),a("h2",{attrs:{id:"计数二进制子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计数二进制子串"}},[t._v("#")]),t._v(" 计数二进制子串")]),t._v(" "),a("p",[t._v("给定一个字符串s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。"),a("br"),t._v("\n重复出现的子串要计算它们出现的次数。")]),t._v(" "),a("blockquote",[a("p",[t._v('输入: "00110011" '),a("br"),t._v("\n输出: 6 "),a("br"),t._v("\n解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。")])]),t._v(" "),a("p",[t._v("思路：光标向右移动（字符串长度确定的用for循环），找匹配的字符串（必须有1和0）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const countBinarySubstrings = (str) => {\n    // 建立数据结构，堆栈，保存数据\n    let r = []\n    // 给定任意子输入都返回第一个符合条件的子串\n    let match = (str) => {\n        let j = str.match(/^(0+|1+)/)[0]   // () 匹配字符串  \n        console.log(\'j-------\x3e\'+j)\n        console.log(\'j[0]-------\x3e\'+j[0] )\n        // ^：按位异或（相同为0，不同为1） 1%2 余数为1，所以1的二进制为1   0的二进制为0    \n        // 作用：如果j是0，就位运算变为1；如果是1就位运算变为0，确保字符串有1和0\n        let o = (j[0] ^ 1).toString().repeat(j.length)\n        let reg = new RegExp(`^(${j}${o})`)\n        if (reg.test(str)) {\n            console.log(reg)\n            return RegExp.$1\n        } else {\n            return \'\'\n        }\n    }\n    // 1. 通过for循环控制程序运行的流程\n    for (let i = 0, len = str.length - 1; i < len; i++) {\n        // 2. 找到匹配的，只要有一个匹配的就push到r中\n        let sub = match(str.slice(i))\n        if (sub) {\n            r.push(sub)\n        }\n    }\n    return r\n}\nconsole.log(countBinarySubstrings("00110011")) // ["0011", "01", "1100", "10", "0011", "01"]\n')])])]),a("h2",{attrs:{id:"无重复字符的最长子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无重复字符的最长子串"}},[t._v("#")]),t._v(" 无重复字符的最长子串")]),t._v(" "),a("p",[t._v("给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度")]),t._v(" "),a("blockquote",[a("p",[t._v('输入: "abcabcbb" '),a("br"),t._v("\n输出: 3  "),a("br"),t._v('\n解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3 '),a("br")])]),t._v(" "),a("p",[t._v("思路： "),a("br"),t._v("\n1）创建一个set，两个指针，指针j指向字符串靠头，指针i随着for循环遍历字符串 "),a("br"),t._v("\n2）如果set没有str[i], 说明目前为止还没有重复的字符，把str[i]添加到set里，然后更新最大不重复字符的数量。"),a("br"),t._v("\n如果set没有str[i]，则从set里前头开始删除str[i]，并且递增j，再检查set里是否有str[i]，如此反复直到set里没有str[i]为止 "),a("br"),t._v("\n3）重复第二步，直到遍历完整个字符串")]),t._v(" "),a("p",[a("img",{attrs:{src:n(222),alt:"Image text"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function lengthOfLongestSubstring(s) {\n    const set = new Set()\n    let i =0, j =0,maxLength=0;\n    if(s.length ===0) return 0\n\n    for(i; i<s.length;i++){\n        if(!set.has(s[i])){\n            set.add(s[i])\n            maxLength = Math.max(maxLength, set.size)\n        }else{\n            while(set.has(s[i])){\n                set.delete(s[j])\n                j++\n            }\n            set.add(s[i])\n        }\n    }\n    return maxLength\n};\nconsole.log(lengthOfLongestSubstring("pwwkew"))\n')])])]),t._v(" "),a("h2",{attrs:{id:"交换星号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交换星号"}},[t._v("#")]),t._v(" 交换星号")]),t._v(" "),a("p",[t._v("题目：一个字符串中只包含 * 和数字，请把 * 号都放开头。\n思路：使用两个指针，从后往前扫字符串，遇到数字则赋值给后面的指针，继续往后扫，遇到 * 则不处理。")]),t._v(" "),a("p",[t._v("逆序操作数组，遇见数字则向后置，遍历完一遍后，所有的数字都已经在后边了，同时把前边的数组项用 * 填充")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const isNumeric = n => !isNaN(parseFloat(n)) && isFinite(n);\nconst solution = s => {\n    const n = s.length\n    let a = s.split(\'\')\n    let j = n - 1\n\n    for (let i = n - 1; i >= 0; --i){\n        if (isNumeric(a[i])) a[j--] = a[i] // 遍历，把数组中数字放回数组\n    }\n    //此时a = ["1", "3", "1", "3", "4", "2", "3", "2", "5", "4", "4"]\n\n    // 走到这步，j等于1 、0\n    for (; j >= 0; --j){\n        a[j] = \'*\'\n    }\n    return a.join(\'\')\n}\nconsole.log(solution(\'134*232*544\'))\n')])])]),a("p",[t._v("替换、重复等，都可以优先考虑双指针")]),t._v(" "),a("h2",{attrs:{id:"复原ip地址-（视频6）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复原ip地址-（视频6）"}},[t._v("#")]),t._v(" 复原IP地址  （视频6）")]),t._v(" "),a("p",[t._v("ip地址规则：")]),t._v(" "),a("ul",[a("li",[t._v("分四段")]),t._v(" "),a("li",[t._v("每段都在0~255之间")]),t._v(" "),a("li",[t._v("每段之间用.区分")]),t._v(" "),a("li",[t._v("段内的数字如果是0则直接进入下一段，不存在01.02.03.04的ip")])]),t._v(" "),a("p",[t._v("剪枝条件")]),t._v(" "),a("ul",[a("li",[t._v("剩余字符串需要小于剩余段*3")]),t._v(" "),a("li",[t._v("单段数字不可超过255")]),t._v(" "),a("li",[t._v("如果当段首字是0，则保留自身，进行递归")])]),t._v(" "),a("h2",{attrs:{id:"串联所有单词的子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串联所有单词的子串"}},[t._v("#")]),t._v(" 串联所有单词的子串")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/qq_28410301/article/details/100521743")]),t._v(" "),a("h2",{attrs:{id:"整数反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数反转"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-integer/",target:"_blank",rel:"noopener noreferrer"}},[t._v("整数反转"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[t._v("先取符号 采用es6 Math.sign 符号函数， 正数返回 1 ，负数返回 -1")]),t._v(" "),a("li",[t._v("绝对值-> 转字符串 -> 字符串转数组 -> 反转数组 -> 字符串 -> 上符号 -> 判断范围")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reverse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sign "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" sign\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("321")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);