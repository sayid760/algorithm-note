(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{236:function(n,t,e){"use strict";e.r(t);var r=e(17),a=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"根据字符出现频率排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据字符出现频率排序"}},[n._v("#")]),n._v(" 根据字符出现频率排序")]),n._v(" "),e("p",[n._v("给定一个字符串，请将字符串里的字符按照出现的频率降序排列。")]),n._v(" "),e("blockquote",[e("p",[n._v("输入:\"tree\"\n输出:\"eert\"\n解释:\n'e'出现两次，'r'和't'都只出现一次。\n因此'e'必须出现在'r'和't'之前。此外，\"eetr\"也是一个有效的答案。")])]),n._v(" "),e("p",[n._v("堆排序，复杂度是最低的\nes6 map 方便移除与添加\n思路：1）统计出现次数 2）排序  3）输出")]),n._v(" "),e("h2",{attrs:{id:"超级丑数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#超级丑数"}},[n._v("#")]),n._v(" 超级丑数")]),n._v(" "),e("p",[n._v("编写一段程序来查找第 n 个超级丑数。\n超级丑数是指其所有质因数都是长度为 k 的质数列表 primes 中的正整数。")]),n._v(" "),e("blockquote",[e("p",[n._v("输入: n = 12, primes = [2,7,13,19] "),e("br"),n._v("\n输出: 32 "),e("br"),n._v("\n解释: 给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32]")])]),n._v(" "),e("p",[n._v("质因数是约数（能被2整除 n%i ===0 ）和质数（大于1的自然数中，除了1和它本身整除，不再有其他约数）\n质因数也是质数，只不过任意一个数的因素\n丑数：只包含因子2、3、5的正整数，比如4、10、12都是丑数，另外1也是丑数")]),n._v(" "),e("p",[n._v("思路：先找到任意一个正整数的质因数，再去这个质数列表primes中去查，如果在就是超级丑数\n怎么算正整数的质因数是什么？")]),n._v(" "),e("p",[n._v("步骤：\n1）先找到任意一个正整数的质因数（计算）\n2）质因数是都在指定质因数范围内（查）\n用最大堆、最小堆也好，堆具备快速查找，当找一个数不存在的时候特别容易，比如找100，最大堆的已经是19，就不可能找到\n3）是否达到指定个数n（验证）")]),n._v(" "),e("h2",{attrs:{id:"扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[n._v("#")]),n._v(" 扩展")]),n._v(" "),e("p",[n._v("判断是否质数（素数）")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function isPrime(num) {\n    if (validate(num)) {\n        for (let i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);